{%- func dotnetConsts(data *ConstTemplateData) -%}
// This file will be regenerated by tsbuild
namespace StarFederation.Datastar

open System

{%- for _, enum := range data.Enums -%}
type {%s enum.Name.Pascal %} ={% for _, entry := range enum.Values %} | {%s entry.Name.Pascal %}{% endfor %}

{% endfor %}
module Consts =

    let [<Literal>] Version                   = "{%s data.Version %}"
    let [<Literal>] VersionClientByteSize     = {%d data.VersionClientByteSize %}
    let [<Literal>] VersionClientByteSizeGzip = {%d data.VersionClientByteSizeGzip %}

    let DefaultSettleDuration     = TimeSpan.FromMilliseconds {%d durationToMs(data.DefaultSettleDuration) %}
    let DefaultSSERetryDuration   = TimeSpan.FromMilliseconds {%d durationToMs(data.DefaultSSERetryDuration) %}
    let [<Literal>] DefaultUseViewTransitions = {%v data.DefaultUseViewTransitions %}
    let [<Literal>] DefaultOnlyIfMissing = {%v data.DefaultOnlyIfMissing %}

    let [<Literal>] DatastarLiteral = "{%s data.DatastarLiteral %}"
    let [<Literal>] SelectorLiteral = "{%s data.SelectorLiteral %}"
    let [<Literal>] MergeLiteral = "{%s data.MergeLiteral %}"
    let [<Literal>] SettleDurationLiteral = "{%s data.SettleDurationLiteral %}"
    let [<Literal>] FragmentLiteral = "{%s data.FragmentLiteral %}"
    let [<Literal>] UseViewTransitionLiteral = "{%s data.UseViewTransitionLiteral %}"
    let [<Literal>] StoreLiteral = "{%s data.StoreLiteral %}"
    let [<Literal>] OnlyIfMissingLiteral = "{%s data.OnlyIfMissingLiteral %}"
    let [<Literal>] UrlLiteral = "{%s data.UrlLiteral %}"

{%- for _, enum := range data.Enums -%}
    module {%s enum.Name.Pascal %} =
        let toString (this.{%s enum.Name.Pascal %}) =
            match this with
                {%- for _, entry := range enum.Values -%}
                | {%s enum.Name.Pascal %}.{%s entry.Name.Pascal %} -> "{%s entry.Value %}"
                {%- endfor -%}

{%- endfor -%}
{%- endfunc -%}
